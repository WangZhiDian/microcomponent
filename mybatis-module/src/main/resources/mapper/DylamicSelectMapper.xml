<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.meng.dao.DylamicSelectUserDao">

    <!-- 标签直接是可以嵌套使用的，只要语法规则没有问题-->
    <resultMap id="BaseResultMap" type="com.meng.domain.User">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="id" property="id" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="age" property="age" jdbcType="INTEGER"/>
    </resultMap>

    <!--if标签可通过test属性（即传递过来的数据）的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行
        使用if标签，弊端：需要使用where 1=1 放在前头，否则where后直接跟and会异常-->
    <select id="getUserByConditionIf" resultMap="BaseResultMap">
        select id, name, age from tbl_mybatis_user where 1 = 1
        <if test="id != null">
            and id = #{id}
        </if>
        <if test="name != null and name != ''">
            and name = #{name}
        </if>
    </select>


    <!--where和if一般结合使用：
        若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字
        若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and/or去掉
        where 标签，弊端：只能去掉条件后面and和or，不能去掉前面对and和or-->
    <!--List<User> getUserByConditionWhere(User user);-->
    <select id="getUserByConditionWhere" resultMap="BaseResultMap">
        select id, name, age from tbl_mybatis_user
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="name != null and name != ''">
                and name = #{name}
            </if>
        </where>
    </select>

    <!--trim用于去掉或添加标签中的内容
        常用属性
            prefix：在trim标签中的内容的前面添加某些内容
            suffix：在trim标签中的内容的后面添加某些内容
            prefixOverrides：在trim标签中的内容的前面去掉某些内容
            suffixOverrides：在trim标签中的内容的后面去掉某些内容
        若trim中的标签都不满足条件，则trim标签没有任何效果，也就是只剩下select * from t_emp
        trim 标签：为了处理where标签处理不了对sql后面对and和or
    -->
    <!--    List<User> getUserByConditionTrim(User user);-->
    <select id="getUserByConditionTrim" resultMap="BaseResultMap">
        select id, name, age from tbl_mybatis_user
        <trim prefix="where" prefixOverrides="and|or" suffixOverrides="and|or">
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="name != null and name != ''">
                and name = #{name}
            </if>
        </trim>
    </select>

    <!--choose、when、otherwise
            choose、when、otherwise相当于if...else if..else
            when至少要有一个，otherwise至多只有一个
            相当于if a else if b else if c else d，只会执行其中一个
    -->
    <!--    List<User> getUserByConditionChoose(User user);-->
    <select id="getUserByConditionChoose" resultMap="BaseResultMap">
        select id, name, age from tbl_mybatis_user
        <where>
            <choose>
                <when test="id != null">
                    id = #{id}
                </when>
                <when test="name != null and name != ''">
                    and name = #{name}
                </when>
                <otherwise>
                    id = 1
                </otherwise>
            </choose>
        </where>
    </select>


    <!--属性：
            collection：设置要循环的数组或集合
            item：表示集合或数组中的每一个数据别名
            index指 定一个名字，用于表示在迭代过程中，每次迭代到的位置，
            separator：设置循环体之间的分隔符，分隔符前后默认有一个空格，如,
            open：设置foreach标签中的内容的开始符
            close：设置foreach标签中的内容的结束符

            在使用foreach的时候最关键的也是最容易出错的就是collection属性，该属性是必须指定的，但是在不同情况 下，该属性的值是不一样的，主要有一下3种情况：
            1. 如果传入的是单参数且参数类型是一个List的时候，collection属性值为list
            2. 如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array
            3. 如果传入的参数是多个的时候，需要在dao用@Param设置别名，把它们封装成一个Map了，当然单参数也可
    -->
    <!--    List<User> getUserByForeachIds(List<Long> userIdList);-->
    <!--    foreach参数可以在dao中用@Param("ids")设置别名，然后collection属性对值为别名的值,如下
            <foreach collection="ids" item="uid" open="(" close=")" separator=",">  -->
    <select id="getUserByForeachIds" resultMap="BaseResultMap">
        select id, name, age from tbl_mybatis_user
        where id in 
        <foreach collection="list" item="uid" open="(" close=")" separator=",">
            #{uid}
        </foreach>
    </select>


    <!-- List<User> getUserByForeachUsers(List<User> users);-->
    <select id="getUserByForeachUsers" resultMap="BaseResultMap">
        select id, name, age from tbl_mybatis_user
        where id in
        <foreach collection="users" item="user" open="(" close=")" separator=",">
            #{user.id}
        </foreach>
    </select>




</mapper>

